name: Tests

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  laravel-email-archive-tests:

    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      # Label used to access the service container
      laravel-email-archive-mysql:
        # Docker Hub image (also with version)
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE:  laravel_email_archive
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        volumes:
          - ./docker/mysql/my.cnf:/etc/mysql/my.cnf

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        dependency-stability: [ prefer-stable ]

    name: PHPUnit w/ PHP v8.3

    steps:
      - name: Chown user
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
      - uses: actions/checkout@v2
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: ext-mailparse
      - name: Install mailparse
        run: sudo apt install php-mailparse
      - name: Get Composer Cache Directory 2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.ci', '.env');"
      - name: Install Dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --verbose

      - name: Create storage folders
        run: mkdir -p storage/framework/{sessions,views,cache}
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Show dir
        run: pwd
      - name: PHP Version
        run: php --version

      - name: Docker PS
        run: docker ps

      # Code quality
      - name: Execute tests (Unit and Feature tests)
        run: |
          php artisan key:generate
          php artisan migrate:install
          php artisan migrate --seed
          vendor/bin/phpunit --testdox --stop-on-failure
